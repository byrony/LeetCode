#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb  8 20:24:30 2017

@author: caoxiang
"""

nums = [-1, 0, 1, 2, -1, -4]

"""
Exceed time limit. Can't pass last three test sets.
The problem exists in removing duplicates.
"""
def threeSum(nums):
    nums.sort() # sort the nums first to avoid sort later
    result = []

    # edge case when length of nums is 3
    if len(nums)==3 and sum(nums)==0:
        result.append(nums)
        return result
    
    # when length of nums >=3
    for i in range(len(nums)-3):
        target = 0 - nums[i]

        # construct a dictionary, key is number, value is index
        dic = {}
        for j in range(i+1, len(nums)):
            dic[nums[j]] = j
        
        # check if sum of two numbers equals to target
        for j in range(i+1, len(nums)):
            diff = target - nums[j]
            if diff < nums[j]:
                break
            elif diff in dic and dic[diff] != j:
                #check duplicates indexes
                new_result = [nums[i], nums[j], diff]
                for n in result:
                    if n == new_result:
                        break
                else:
                    result.append(new_result)    
    return result
        

"""
Use two pointers. The way removing duplicates refers:
https://github.com/shichao-an/leetcode-python/commit/2edda1c4ad5dae9edace5fb6615ad49a9b051f0f
"""
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        result = []
    
        for i in range(len(nums)-2):
            # avoid duplicates generated by nums[i]. If nums[i] = nums[i-1], skip this one.
            if i==0 or i>0 and nums[i-1] != nums[i]:
                begin, end = i+1, len(nums)-1
                while begin<end:
                    s = nums[i] + nums[begin] + nums[end]
                    if s == 0:
                        result.append([nums[i], nums[begin], nums[end]])
        
                        begin += 1
                        end -= 1
                        # avoid duplicates generated by nums[begin] and nums[end]
                        while begin < end and nums[begin]==nums[begin-1]:
                            begin += 1
                        while begin < end and nums[end]==nums[end+1]:
                            end -=1
                        
                    elif s > 0:
                        end -= 1
                    elif s < 0:
                        begin +=1
            else:
                pass
        return result
        
        